{"paragraphs":[{"title":"Imports","text":"import org.datavec.api.transform._\nimport org.deeplearning4j.datasets.iterator._\nimport org.deeplearning4j.datasets.iterator.impl._\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.multilayer._\nimport org.deeplearning4j.nn.graph._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.inputs._\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.weights._\nimport org.deeplearning4j.optimize.listeners._\nimport org.deeplearning4j.api.storage.impl.RemoteUIStatsStorageRouter\nimport org.deeplearning4j.ui.stats.StatsListener\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.learning.config._\nimport org.nd4j.linalg.lossfunctions.LossFunctions._\nimport org.nd4j.linalg.factory.Nd4j\nimport io.skymind.zeppelin.utils._\nimport io.skymind.modelproviders.history.client.ModelHistoryClient\nimport io.skymind.modelproviders.history.model._\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622618_-582086755","id":"20190618-054342_1844603151","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"title":"SKIL Context","text":"val skilContext = new SkilContext()\nval client = skilContext.client","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622621_-584779998","id":"20190618-054342_323035308","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"title":"Variables","text":"val numRows = 28\nval numColumns = 28\nval outputNum = 10 // number of output classes\nval batchSize = 128 // batch size for each epoch\nval rngSeed = 42 // random number seed for reproducibility\nval numEpochs = 5 // number of epochs to perform","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622621_-584779998","id":"20190618-054342_288339176","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"title":"How to interact with SKIL with DL4J","text":"val trainData = new MnistDataSetIterator(batchSize, true, rngSeed)\nval testData = new MnistDataSetIterator(batchSize, false, rngSeed)\n\nval model = {\n    val conf = new NeuralNetConfiguration.Builder()\n        .seed(rngSeed) // include a random seed for reproducibility\n        .updater(new AMSGrad(0.004)) //specify the updating method and learning rate.\n        .list()\n        .layer(0, new DenseLayer.Builder()\n                .nIn(numRows * numColumns)\n                .nOut(768)\n                .activation(Activation.RELU)\n                .weightInit(WeightInit.RELU)\n                .dropOut(1 - 0.2)\n                .build())\n        .layer(1, new OutputLayer.Builder(LossFunction.MCXENT)\n                .nIn(768)\n                .nOut(outputNum)\n                .activation(Activation.SOFTMAX)\n                .weightInit(WeightInit.XAVIER)\n                .build())\n        .build()\n\n    val model = new MultiLayerNetwork(conf)\n    model.init()\n    println(model.summary())\n    model\n}\n\nmodel.setListeners(new ZeppelinTrainingListener(z, testData, numEpochs))\n\n// To see the training UI:\n// 1. start a UI server with \"%sh /opt/skil/sbin/skil ui\"\n// 2. uncomment the following code\n// 3. open a new browser window to port 9002.\n//val remoteUIRouter = new RemoteUIStatsStorageRouter(\"http://localhost:9002\")\n//model.setListeners(new StatsListener(remoteUIRouter))\n\nmodel.fit(trainData, numEpochs)\n\nvar evaluation: Evaluation = null\n\n{\n    evaluation = model.evaluate(testData)\n    println(evaluation)\n}\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622621_-584779998","id":"20190618-054342_1379987649","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"title":"Save DL4J model to Experiment","text":"val modelId = skilContext.addModelToExperiment(z, model, \"Sample MNIST model\")\n\nval evalId = skilContext.addEvaluationToModel(z, modelId, evaluation, \"mlp \" + numEpochs + \" epochs\")\n\n// To use your trained model in your Spark cluster add a KeyedDataProvider to a plugin jar and run:\n// import io.skymind.skil.daemon.model.SparkArgs\n// val args = SparkArgs.builder().master(\"yarn\").build() // All spark-submit options available.\n// skilContext.batchInference(z, args, modelId, \"io.skymind.skil.train.spark.MnistKeyedProvider\", \"hdfs:/tmp/out1\")\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622621_-584779998","id":"20190618-054342_930786180","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:111"},{"title":"Python imports","text":"%pyspark\n\nimport numpy as np\nimport tensorflow as tf\n\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, Flatten, MaxPooling2D\nfrom keras.regularizers import l2\nfrom keras.optimizers import Adam\n\nbatch_size = 256\nnum_output = 10\nepochs = 5\nrng_seed = 42\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1560836622621_-584779998","id":"20190618-054342_757377415","dateCreated":"2019-06-18T05:43:42+0000","dateStarted":"2019-06-18T05:49:01+0000","dateFinished":"2019-06-18T05:49:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:112"},{"title":"Python SKIL Context","text":"%pyspark\n\nimport skil\n\nskilContext = skil.SkilContext(sc)\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1560836622622_-583625751","id":"20190618-054342_1103155263","dateCreated":"2019-06-18T05:43:42+0000","dateStarted":"2019-06-18T05:47:37+0000","dateFinished":"2019-06-18T05:47:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:113"},{"title":"Python training","text":"%pyspark\n\nnp.random.seed(42)\ntf.set_random_seed(42)\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nx_train = x_train.reshape(60000, 28, 28, 1)\nx_test = x_test.reshape(10000, 28, 28, 1)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\ny_train = keras.utils.to_categorical(y_train, num_output)\ny_test = keras.utils.to_categorical(y_test, num_output)\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = (28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.20))\nmodel.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.20))\nmodel.add(Conv2D(128, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.20))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.20))\nmodel.add(Dense(10, activation = 'softmax'))\n\nmodel.summary()\n\nmodel.compile(loss='categorical_crossentropy',\n  optimizer=Adam(lr=0.004, amsgrad=True),\n  metrics=['accuracy'])\n\n#model.fit(x_train, y_train,\n#    batch_size=batch_size,\n#    epochs=epochs,\n#    verbose=2,\n#    validation_data=(x_test, y_test))\n\nmodel.load_weights(\"/var/skil/Mnist/mnist_CNN.h5\")\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_2 (Conv2D)            (None, 26, 26, 32)        320       \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 13, 13, 32)        0         \n_________________________________________________________________\nconv2d_3 (Conv2D)            (None, 11, 11, 64)        18496     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 5, 5, 64)          0         \n_________________________________________________________________\nconv2d_4 (Conv2D)            (None, 3, 3, 128)         73856     \n_________________________________________________________________\nmax_pooling2d_3 (MaxPooling2 (None, 1, 1, 128)         0         \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 1, 1, 128)         0         \n_________________________________________________________________\nflatten_1 (Flatten)          (None, 128)               0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 256)               33024     \n_________________________________________________________________\ndropout_4 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 10)                2570      \n=================================================================\nTotal params: 128,266\nTrainable params: 128,266\nNon-trainable params: 0\n_________________________________________________________________\n2019-06-18 05:49:03.453282: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n2019-06-18 05:49:03.455358: I tensorflow/core/common_runtime/process_util.cc:69] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n('Test loss:', 0.03543438912758279)\n('Test accuracy:', 0.9922)\n"}]},"apps":[],"jobName":"paragraph_1560836622622_-583625751","id":"20190618-054342_2123298505","dateCreated":"2019-06-18T05:43:42+0000","dateStarted":"2019-06-18T05:49:03+0000","dateFinished":"2019-06-18T05:49:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:114"},{"title":"Python model saving.","text":"%pyspark\n\nmodel_id = skilContext.addModelToExperiment(z, model, \"Keras MNIST Model CNN\")\nskilContext.addEvaluationToModel(z, model_id, model, x_test, y_test, \"Keras mlp \" + str(epochs) + \" epochs\")\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"u'22647f68-7a2f-461b-a362-fe1095c94f6b'\n"}]},"apps":[],"jobName":"paragraph_1560836622622_-583625751","id":"20190618-054342_1028205361","dateCreated":"2019-06-18T05:43:42+0000","dateStarted":"2019-06-18T05:49:12+0000","dateFinished":"2019-06-18T05:49:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:115"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2019-06-18T06:52:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1560836622622_-583625751","id":"20190618-054342_172650566","dateCreated":"2019-06-18T05:43:42+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:116"}],"name":"mnist","id":"2EGBHHP5Z","angularObjects":{"2ED1ERGQC:existing_process":[],"2EE6BM5PV:existing_process":[],"2EED5U591:existing_process":[],"2EFZSKW21:existing_process":[],"2ECQMCC9K:existing_process":[],"2ECTW96U2:existing_process":[],"2EGHUBD3K:existing_process":[],"2EF2GYKB4:existing_process":[],"2EG98CJCK:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}